import random

sbox =  [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67,
            0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59,
            0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7,
            0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1,
            0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05,
            0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83,
            0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29,
            0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
            0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa,
            0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c,
            0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc,
            0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,
            0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
            0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee,
            0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49,
            0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
            0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4,
            0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6,
            0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70,
            0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9,
            0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e,
            0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1,
            0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0,
            0x54, 0xbb, 0x16]

# Rijndael Inverted S-box
sbox_inv = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3,
            0x9e, 0x81, 0xf3, 0xd7, 0xfb , 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f,
            0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb , 0x54,
            0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b,
            0x42, 0xfa, 0xc3, 0x4e , 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24,
            0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25 , 0x72, 0xf8,
            0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d,
            0x65, 0xb6, 0x92 , 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
            0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84 , 0x90, 0xd8, 0xab,
            0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3,
            0x45, 0x06 , 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1,
            0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b , 0x3a, 0x91, 0x11, 0x41,
            0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6,
            0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9,
            0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e , 0x47, 0xf1, 0x1a, 0x71, 0x1d,
            0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b ,
            0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0,
            0xfe, 0x78, 0xcd, 0x5a, 0xf4 , 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07,
            0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f , 0x60,
            0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f,
            0x93, 0xc9, 0x9c, 0xef , 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5,
            0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61 , 0x17, 0x2b,
            0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55,
            0x21, 0x0c, 0x7d]


Rcon = [0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
            0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97,
            0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72,
            0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66,
            0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
            0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d,
            0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
            0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61,
            0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
            0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
            0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc,
            0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5,
            0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a,
            0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d,
            0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c,
            0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
            0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4,
            0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
            0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08,
            0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
            0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d,
            0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2,
            0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74,
            0xe8, 0xcb ]


def main():
    k = createKey(16)
    key = key_expansion(k, 4, 4, 10)
    arr = []
    encArr = []
    strArr = []
    final = ""
    for i in range(1000000):
        x = random.randint(0, (1<<128)-1)
        state = unpack_state(x,4)
        sub_bytes(state, 4, sbox)
        shift_rows(state,4, 1)
        shift_rows(state,4, -1)
        sub_bytes(state, 4, sbox_inv)
        res = pack_state(state, 4)

        # x should equal res
        if x != res:
            print "Whaaaaa!\n x = %02x\n res = %02x\n"%(x,res)

#256 bit key in array
def createKey(n):
    word = []
    for i in range(n):
        word.append(random.randint(0, 255))
    return word

def multGF256(p,q):
  m = 0x11b
  r = 0
  while q:
    if q&1:
        r ^= p
        p <<= 1
    if p&0x100:
        p ^= m
        q >>= 1
  return r

#Routine used to generate a series of Round Keys from the Cipher Key.
def key_expansion(key, nk, nr = 10, nb = 4):
    word = []
    i = 0
    t_word = []
    while (i < nk):
        word += [[key[i][0], key[i][1], key[i][2], key[i][3]]]
        i+=1
    i = nk
    while (i < nb * (nr+1)):
        temp = word[i-1]
        if (i % nk == 0):
            temp = reduce(sub_word(rot_word(temp)), [Rcon[i//nk], 0,0,0])
        elif(nk > 6 and i % nk == 4):
            temp = sub_word(temp)
        temp = reduce(word[i-nk], temp)
        word += [temp]
        i += 1
    return word

#Transformation in the Cipher and Inverse Cipher in which a Round Key is added
#to the State using an XOR operation. The length of a Round Key equals the size
#of the State (i.e., for Nb = 4, the Round Key length equals 128 bits/16 bytes).
def AddRoundKey(arr, key, nb):
    for i in range(nb):
        for j in range(nb):
            arr[i][j] = arr[i][j]^key[j]
    return arr

#speaks for itself
def bitstring_to_kbit_stream(n, num_words, k=8):
    mask = (1<<k)-1
    for i in range(num_words):
        yield n&mask
        n >>= k

#
def matrix_mult(a,b):
    if len(a[0])!=len(b):
        print("not equal length, try again")
        return 0
    else:
        res = [[0 for i in range(len(b[0]))]for j in range(len(a))]
        for i in range(len(a)):
            for j in range(len(b[0])):
                for k in range(len(b)):
                    res[i][j]^= multGF256(a[i][k],b[k][j])
        return res

#Rubix cube type stuff
def mix_columns(state, num_blocks):
    aofx = [[2,3,1,1],[1,2,3,1],[1,1,2,3],[3,1,1,2]]
    newmatrix = []
    for c in range(num_blocks):
        newmatrix.append(matrix_mult(aofx,[[state[i][c]] for i in range(len(state[0]))]))
    newmatrix1 = [[0 for i in range(len(aofx))]for j in range(len(state[0]))]
    for i in range(len(newmatrix1)):
        for j in range(len(newmatrix1[0])):
            newmatrix1[i][j] = newmatrix[j][i][0]
    return newmatrix1

def mix_columns_inv(state, num_blocks):
    newstate = state
    for i in range(num_blocks-1):
        newstate = mix_columns(newstate, num_blocks)
    return newstate

#    Convert a single int of num_blocks*4 bits into a Rijdael state
def unpack_state(inp,num_blocks):

    return [list(bitstring_to_kbit_stream(b,4,8))
        for b in bitstring_to_kbit_stream(inp,num_blocks,32)]


def pack_state(state,num_blocks):
    result = 0
    for r in range(num_blocks):
        for c in range(4):
            result <<= 8
            result |= state[-(r+1)][-(c+1)]
    return result

# Convert a Rijndael state into a human readable string for debugging
def state_to_str(state, num_blocks):
    s = ""
    for r in range(4):
        for c in range(num_blocks):
            s += "%02x "%state[r][c]
        s += "\n"
    #for c in range(num_block s):
    #    s += "%02x "%state[r][c]
    return s

#In place substitution using the given table. Used for both sub_bytes
#and sub_bytes_inv in Rijndael
def sub_bytes(state, num_blocks, table):
    """
    """
    for c in range(num_blocks):
        for r in range(4):
            state[r][c] = table[state[r][c]]

#byte manipulation
#not used but capability of specifying shift fwd/bckwd 1 step..
#..at least hopefully it does
def ShiftRows(state, nb, direction):
    if (direction == 1):
        return ShiftRowsForward(state)
    else:
        return ShiftRowsBackward(state)

#row shifting..
def shift_row(arr, offset):
    idx = -offset%(len(arr))
    return arr[idx:] + arr[:idx]

#called for ShiftRows (not used)
def ShiftRowsForward(arr):
    i = 0
    x = list()
    while i < len(arr):
        x.append(ShiftRow(arr[i], i))
        i += 1
    return x

#called for ShiftRows (not used)
def ShiftRowsBackward(arr):
    i = 0
    x = list()
    while i < len(arr):
        x.append(ShiftRow(arr[i], -i))
        i += 1
    return x


#if __name__ == "__main__":
 #   for i in range(1000000):
  #      x = random.randint(0, (1<<128)-1)
   #     state = unpack_state(x,4)
    #    sub_bytes(state, 4, sbox)
     #   shift_rows(state,4, 1)
      #  shift_rows(state,4, -1)
       ##res = pack_state(state, 4)


        ## x should equal res
        #if x != res:

         #   print "Whaaaaa!\n x = %02x\n res = %02x\n"%(x,res)


        # print hex(x)
        # state = unpack_state(x,4)
        # print "Before sub_bytes"
        # print (state_to_str(state,4)),"\n"
        # sub_bytes(state,4, sbox)
        # print "After sub_bytes_inv"
        # print (state_to_str(state,4)),"\n"
        # sub_bytes(state,4,sbox_inv)
        # print "After round trip"
        # print (state_to_str(state,4)),"\n"
